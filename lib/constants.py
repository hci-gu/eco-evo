import os
from enum import Enum

class Terrain(Enum):
    LAND = 0
    WATER = 1
    OUT_OF_BOUNDS = 2

class Species(Enum):
    PLANKTON = 0
    ANCHOVY = 1
    COD = 2

class Action(Enum):
    UP = 0
    DOWN = 1
    LEFT = 2
    RIGHT = 3
    EAT = 4

WORLD_SIZE = 50
NOISE_SCALING = 4.5

STARTING_BIOMASS_COD = 3000
STARTING_BIOMASS_ANCHOVY = 6400
STARTING_BIOMASS_PLANKTON = 14800
# STARTING_BIOMASS_COD = 3000
# STARTING_BIOMASS_ANCHOVY = 6400
# STARTING_BIOMASS_PLANKTON = 14800
MIN_PERCENT_ALIVE = 0.2
MAX_PERCENT_ALIVE = 3
MAX_STEPS = 5000

HUNT_SUCCESS_RATE_ANCHOVY = 0.5
HUNT_SUCCESS_RATE_COD = 0.25
EAT_AMOUNT_ANCHOVY = 0.25
EAT_AMOUNT_COD = 0.25
BASE_BIOMASS_LOSS = 0.05
BIOMASS_GROWTH_RATE = 0.075
PLANKTON_GROWTH_RATE = 0.0075
MAX_PLANKTON_IN_CELL = (STARTING_BIOMASS_PLANKTON / (WORLD_SIZE * WORLD_SIZE)) * 1.5
MIN_BIOMASS_IN_CELL = {
    0: 0,
    1: STARTING_BIOMASS_ANCHOVY / (WORLD_SIZE * WORLD_SIZE) / 20,
    2: STARTING_BIOMASS_COD / (WORLD_SIZE * WORLD_SIZE) / 20
}

BASE_PLANKTON_SPAWN_RATE = STARTING_BIOMASS_PLANKTON / (WORLD_SIZE * WORLD_SIZE) / 20
PLANKTON_RESPAWN_DELAY = 150
# MAX_PLANKTON_IN_CELL = 1000000000000000
MAX_ANCHOVY_IN_CELL = STARTING_BIOMASS_ANCHOVY / 2
MAX_COD_IN_CELL = STARTING_BIOMASS_COD / 2
ENERGY_REWARD_FOR_EATING = 25
MAX_ENERGY = 100.0

SMELL_EMISSION_RATE = 0.05
SMELL_DECAY_RATE = 0.2

NUM_AGENTS = 24
AGENT_EVALUATIONS = 4
ELITISM_SELECTION = 8
TOURNAMENT_SELECTION = 6
BASE_ENERGY_COST = 0.5
GENERATIONS_PER_RUN = 150

INITIAL_MUTATION_RATE = 0.15
MIN_MUTATION_RATE = 0.01
MUTATION_RATE_DECAY = 0.99

NETWORK_INPUT_SIZE = 108
NETWORK_HIDDEN_SIZE = 10
NETWORK_OUTPUT_SIZE = 10

OFFSETS_TERRAIN_LAND = 0
OFFSETS_TERRAIN_WATER = 1
OFFSETS_TERRAIN_OUT_OF_BOUNDS = 2

OFFSETS_BIOMASS = OFFSETS_TERRAIN_OUT_OF_BOUNDS + 1

OFFSETS_BIOMASS_PLANKTON = OFFSETS_BIOMASS
OFFSETS_BIOMASS_ANCHOVY = OFFSETS_BIOMASS + 1
OFFSETS_BIOMASS_COD = OFFSETS_BIOMASS + 2

OFFSETS_ENERGY = OFFSETS_BIOMASS_COD + 1

OFFSETS_ENERGY_PLANKTON = OFFSETS_ENERGY
OFFSETS_ENERGY_ANCHOVY = OFFSETS_ENERGY + 1
OFFSETS_ENERGY_COD = OFFSETS_ENERGY + 2

OFFSETS_SMELL_PLANKTON = OFFSETS_ENERGY_COD + 1
OFFSETS_SMELL_ANCHOVY = OFFSETS_SMELL_PLANKTON + 1
OFFSETS_SMELL_COD = OFFSETS_SMELL_ANCHOVY + 1

CURRENT_FOLDER = "results/run"

def override_from_file(file_path):
    global WORLD_SIZE
    global STARTING_BIOMASS_COD
    global STARTING_BIOMASS_ANCHOVY
    global STARTING_BIOMASS_PLANKTON
    global MIN_PERCENT_ALIVE
    global MAX_STEPS
    global EAT_AMOUNT_ANCHOVY
    global EAT_AMOUNT_COD
    global BASE_BIOMASS_LOSS
    global BIOMASS_GROWTH_RATE
    global PLANKTON_GROWTH_RATE
    global MAX_PLANKTON_IN_CELL
    global MAX_ENERGY
    global NUM_AGENTS
    global ELITISM_SELECTION
    global TOURNAMENT_SELECTION
    global BASE_ENERGY_COST
    global GENERATIONS_PER_RUN
    
    global CURRENT_FOLDER
    file_name = os.path.basename(file_path).split(".")[0]

    CURRENT_FOLDER = f"results/{file_name}"
    if not os.path.exists(CURRENT_FOLDER):
        os.makedirs(CURRENT_FOLDER)
        if not os.path.exists(f"{CURRENT_FOLDER}/agents"):
            os.makedirs(f"{CURRENT_FOLDER}/agents")

    with open(file_path, "r") as f:
        for line in f:
            key, value = line.strip().split("=")
            if key in globals():
                globals()[key] = type(globals()[key])(value)
    
    print(f"Overridden constants from file {file_path}")
    print(f"NUM_AGENTS: {NUM_AGENTS}")



